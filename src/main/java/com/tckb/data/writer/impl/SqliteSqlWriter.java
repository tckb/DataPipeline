package com.tckb.data.writer.impl;

import com.tckb.data.basetypes.SerializableData;
import com.tckb.data.parser.impl.DataRecord;
import com.tckb.data.writer.AbstractRecordWriter;

import java.util.Collection;
import java.util.Date;

/**
 * A concrete writer to serialize data into SQL-DCL statements
 * <p>
 * Created by tckb on 27/09/16.
 *
 * @author tckb
 */
public class SqliteSqlWriter<T extends SerializableData> extends AbstractRecordWriter<T> {


	public SqliteSqlWriter(String rootName, String fileExtension) {super(rootName, fileExtension);}

	@Override
	public String serialize(final Collection<DataRecord<? extends SerializableData>> dataRecords) {
		if (dataRecords.isEmpty()) {
			return "";
		} else {
			final String tableName = super.rootName.toLowerCase().replaceAll(" ", "_");
			StringBuilder sqlStatements = new StringBuilder();
			StringBuilder columnInsertStats = new StringBuilder();

			boolean creationAdded = false;

			for (DataRecord<?> record : dataRecords) {
				StringBuilder columnCreationStats = new StringBuilder("ID INT PRIMARY KEY AUTO_INCREMENT")
						.append(",\n");
				StringBuilder valueInsertStats = new StringBuilder();

				record.getDataFields()
						.forEach(dataField -> {
							if (!record.isHeaderRow()) {
								try {
									valueInsertStats.append("'" + dataField.getFieldValue().toSerializableString().replaceAll("'", "\\\\'") + "'")
											.append(",");
								} catch (Exception e) {
									// consume this!
								}
							} else {
								columnCreationStats.append(dataField.getFieldName() + " VARCHAR(1000)")
										.append(",\n");
								columnInsertStats.append(dataField.getFieldName() + ", ");

							}
						});

				// delete the last ","

				if (valueInsertStats.length() > 0) {
					valueInsertStats.deleteCharAt(valueInsertStats.length() - 1);
				}

				if (!creationAdded) {
					if (columnInsertStats.length() > 0) {
						columnInsertStats.deleteCharAt(columnInsertStats.length() - 2);
					}
					if (columnCreationStats.length() > 0) {
						columnCreationStats.deleteCharAt(columnCreationStats.length() - 2);
					}

					creationAdded = true;
					sqlStatements
							.append("-- // Autogenerated script ").append("\n")
							.append("-- //  Generated @ " + new Date()).append("\n")
							.append("\n\n")
							.append("CREATE TABLE IF NOT EXISTS " + tableName + " \n(\n")
							.append(columnCreationStats).append("\n);\n\n");
				}
				if (!record.isHeaderRow()) {
					sqlStatements.append("INSERT INTO " + tableName).append(" (")
							.append(columnInsertStats).append(" ) VALUES(").append(valueInsertStats).append(");\n\n");

				}
			}

			return sqlStatements.toString();
		}
	}
}
